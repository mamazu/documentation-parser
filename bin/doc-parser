#!/usr/bin/env php
<?php

// Example: php doc-parser.php <files to parse>
if ($argc < 2) {
	echo 'Example usage: php doc-parser.php <files to parse>';
	die(1);
}

$autoloadPath = __DIR__ . '/../vendor/autoload.php';
if (file_exists($autoloadPath)) {
	include $autoloadPath;
} else {
	include __DIR__ . '/../../../autoload.php';
}

use Gregwar\RST\Parser;
use Mamazu\DocumentationParser\Application;
use Mamazu\DocumentationParser\CLI;
use Mamazu\DocumentationParser\FileList;
use Mamazu\DocumentationParser\Output\TextFormatter;
use Mamazu\DocumentationParser\Parser\Parser\IgnoredFileParser;
use Mamazu\DocumentationParser\Parser\Parser\MarkdownParser;
use Mamazu\DocumentationParser\Parser\Parser\RstParser;
use Mamazu\DocumentationParser\Parser\Parser\TexParser;
use Mamazu\DocumentationParser\Validator\Bash\BashValidator;
use Mamazu\DocumentationParser\Validator\CompositeValidator;
use Mamazu\DocumentationParser\Validator\JSON\JsonValidator;
use Mamazu\DocumentationParser\Validator\Php\PhpClassExistsValidator;
use Mamazu\DocumentationParser\Validator\XML\XMLValidValidator;
use Mamazu\DocumentationParser\Validator\Yaml\YamlValidator;

$fileList = new FileList();
$cli = new CLI($fileList, array_slice($argv, 1));
$formatter = new TextFormatter();

$application = new Application(
	[
		new MarkdownParser(),
		new RstParser(new Parser()),
		new TexParser(),
		new IgnoredFileParser(),
	],
	[
		'php' =>
			new CompositeValidator(
				[
					new PHPClassExistsValidator(
						static function (string $classOrInterface): bool {
							include_once getcwd() . '/vendor/autoload.php';
							return class_exists($classOrInterface) || interface_exists($classOrInterface);
						}
					),
				]
			),
		'xml' => new XMLValidValidator(),
		'yml' => new YamlValidator(),
		'yaml' => new YamlValidator(),
		'bash' => new BashValidator('bash'),
		'sh' => new BashValidator('sh'),
		'json' => new JsonValidator(),
	]
);

foreach ($cli->getIncludePaths() as $includePath) {
	include $includePath;
}
$application->run($formatter, $cli->getFilesToParse());
